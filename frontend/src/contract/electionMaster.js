import Web3 from 'web3'
let web3 = new Web3(window.ethereum);

web3.eth.net.getNetworkType()
.then(name => {
  if(name !== "ropsten") console.error("Please switch to ropsten testnet!");
});

const addr = "0x9167ac377275E899e281cda65F7722C6bc921429";
const abi = [
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "string",
				"name": "_title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_description",
				"type": "string"
			},
			{
				"internalType": "uint64",
				"name": "_begin",
				"type": "uint64"
			},
			{
				"internalType": "uint64",
				"name": "_end",
				"type": "uint64"
			},
			{
				"internalType": "bytes32[1][]",
				"name": "_choices",
				"type": "bytes32[1][]"
			},
			{
				"internalType": "bytes32[32][]",
				"name": "_voters",
				"type": "bytes32[32][]"
			},
			{
				"internalType": "bytes32[32][]",
				"name": "_tellers",
				"type": "bytes32[32][]"
			},
			{
				"internalType": "bytes32[32]",
				"name": "_admin",
				"type": "bytes32[32]"
			},
			{
				"internalType": "bytes32[4]",
				"name": "_sigN",
				"type": "bytes32[4]"
			},
			{
				"internalType": "bytes32[4]",
				"name": "_sigPhi",
				"type": "bytes32[4]"
			},
			{
				"internalType": "bytes32[4]",
				"name": "_accumBase",
				"type": "bytes32[4]"
			}
		],
		"name": "createElection",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "electionId",
				"type": "uint256"
			}
		],
		"name": "NewElection",
		"type": "event"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "elections",
		"outputs": [
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "uint64",
				"name": "begin",
				"type": "uint64"
			},
			{
				"internalType": "uint64",
				"name": "end",
				"type": "uint64"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getAccumBase",
		"outputs": [
			{
				"internalType": "bytes32[4]",
				"name": "",
				"type": "bytes32[4]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getAdmin",
		"outputs": [
			{
				"internalType": "bytes32[32]",
				"name": "",
				"type": "bytes32[32]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getChoices",
		"outputs": [
			{
				"internalType": "bytes32[1][]",
				"name": "",
				"type": "bytes32[1][]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getElectionsCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getSigN",
		"outputs": [
			{
				"internalType": "bytes32[4]",
				"name": "",
				"type": "bytes32[4]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getSigPhi",
		"outputs": [
			{
				"internalType": "bytes32[4]",
				"name": "",
				"type": "bytes32[4]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getTellers",
		"outputs": [
			{
				"internalType": "bytes32[32][]",
				"name": "",
				"type": "bytes32[32][]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "uint32",
				"name": "_idx",
				"type": "uint32"
			}
		],
		"name": "getVoters",
		"outputs": [
			{
				"internalType": "bytes32[32][]",
				"name": "",
				"type": "bytes32[32][]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]


const getElection = async id => {
  const Contract = new web3.eth.Contract(abi, addr);
  const data = await Contract.methods.elections(id).call()
  .then(data => data)
  .catch(error => {
    console.error(error);
    throw new Error(error);
  })
  return data;
}

const getAllElections = async (updater = null) => {
  const Contract = new web3.eth.Contract(abi, addr);
  const length = await Contract.methods.getElectionsCount().call()
  .then(data => {
    return data;
  })
  .catch(error => {
    console.error(error);
    return false;
  });
  if(length === false) return false;
  let elections = [];
  for(let i = 0;i < length;i++) {
    elections.push(await getElection(i));
    if(updater) updater(`Loading Elections (${i+1}/${length})`)
  }
  return elections;
}

const createElection = async (title, description, begin, end, choices, onHash, onConfirmed) => {
  await window.ethereum.enable();
  const accounts = await web3.eth.getAccounts();
  if(!Array.isArray(accounts) || accounts.length < 1) throw new Error("Get account error!");
  const Account = accounts[0];
  const Contract = new web3.eth.Contract(abi, addr);
  const t1 = [[[25], [8], [16], [104], [217], [67], [107], [105], [87], [203], [188], [109], [85], [208], [104], [213], [44], [229], [201], [241], [9], [41], [155], [171], [14], [110], [25], [24], [119], [28], [109], [238]], [[217], [218], [99], [242], [93], [117], [122], [154], [170], [167], [125], [223], [140], [217], [115], [28], [169], [41], [137], [145], [70], [159], [175], [29], [234], [208], [21], [181], [165], [114], [124], [195]], [[237], [103], [51], [15], [227], [123], [15], [255], [247], [4], [226], [123], [235], [5], [18], [70], [207], [92], [70], [43], [223], [226], [26], [36], [119], [220], [143], [158], [29], [100], [236], [181]], [[154], [51], [47], [103], [185], [98], [240], [22], [9], [72], [0], [41], [52], [2], [51], [184], [56], [9], [144], [197], [189], [4], [152], [140], [152], [146], [73], [53], [235], [81], [127], [143]], [[241], [160], [89], [215], [122], [245], [249], [199], [58], [104], [189], [109], [81], [74], [143], [214], [13], [28], [214], [4], [189], [128], [182], [215], [159], [186], [54], [27], [248], [181], [167], [169]], [[108], [86], [200], [35], [115], [223], [173], [198], [202], [51], [107], [84], [249], [26], [119], [242], [49], [74], [0], [192], [128], [23], [81], [118], [0], [214], [88], [209], [37], [240], [1], [94]], [[159], [210], [27], [221], [65], [21], [140], [127], [186], [50], [129], [1], [120], [44], [186], [229], [243], [87], [109], [60], [79], [44], [115], [184], [13], [4], [124], [90], [105], [248], [144], [23]], [[201], [243], [141], [19], [206], [153], [230], [250], [199], [47], [99], [8], [192], [138], [151], [143], [63], [30], [135], [183], [117], [5], [7], [233], [81], [85], [180], [187], [9], [60], [77], [153]], [[16], [87], [2], [108], [138], [202], [25], [86], [132], [110], [65], [92], [86], [150], [147], [190], [146], [0], [192], [201], [26], [121], [88], [204], [49], [60], [128], [106], [22], [84], [49], [120]], [[124], [113], [17], [52], [192], [154], [30], [36], [81], [156], [14], [76], [207], [181], [127], [207], [112], [14], [71], [157], [79], [153], [118], [133], [102], [211], [212], [59], [160], [65], [0], [132]], [[231], [17], [118], [92], [93], [229], [225], [199], [64], [70], [90], [227], [152], [179], [224], [214], [174], [138], [250], [249], [19], [202], [5], [37], [125], [145], [56], [187], [181], [179], [112], [168]], [[59], [247], [125], [226], [166], [36], [115], [74], [150], [251], [52], [32], [100], [46], [23], [44], [42], [12], [108], [7], [26], [42], [135], [182], [195], [179], [12], [30], [253], [77], [13], [241]], [[216], [216], [45], [80], [189], [167], [236], [189], [16], [239], [137], [149], [237], [248], [190], [245], [132], [4], [109], [25], [26], [236], [170], [200], [10], [83], [12], [102], [21], [1], [216], [11]], [[224], [140], [231], [112], [194], [45], [85], [242], [93], [34], [224], [112], [103], [67], [65], [166], [192], [134], [178], [136], [40], [21], [183], [127], [107], [6], [162], [26], [131], [114], [130], [73]], [[41], [53], [86], [254], [113], [121], [177], [123], [128], [46], [251], [209], [180], [98], [165], [200], [193], [65], [105], [188], [233], [76], [62], [0], [114], [84], [164], [53], [223], [218], [33], [37]], [[6], [155], [211], [150], [253], [163], [218], [74], [13], [142], [103], [54], [6], [98], [59], [191], [203], [141], [181], [155], [248], [139], [178], [5], [116], [63], [117], [84], [126], [155], [100], [226]], [[217], [126], [85], [144], [98], [38], [229], [55], [91], [39], [72], [159], [72], [202], [100], [209], [59], [27], [110], [138], [18], [185], [7], [149], [145], [142], [83], [5], [220], [232], [99], [161]], [[164], [235], [233], [66], [90], [145], [56], [85], [86], [116], [140], [79], [87], [237], [116], [3], [198], [90], [13], [251], [7], [3], [18], [133], [158], [53], [221], [202], [120], [249], [169], [49]], [[156], [226], [245], [125], [112], [208], [75], [27], [11], [3], [84], [76], [58], [248], [138], [1], [195], [42], [198], [152], [188], [182], [137], [83], [102], [228], [231], [229], [207], [246], [120], [215]], [[56], [38], [129], [206], [196], [146], [96], [144], [254], [30], [162], [80], [82], [246], [63], [47], [236], [114], [241], [139], [63], [2], [223], [21], [164], [128], [193], [34], [157], [24], [193], [246]], [[195], [82], [168], [94], [184], [184], [157], [229], [244], [192], [80], [84], [135], [0], [146], [110], [119], [129], [47], [81], [22], [138], [253], [245], [25], [65], [207], [221], [192], [51], [85], [17]], [[140], [187], [87], [17], [192], [103], [41], [209], [64], [156], [208], [67], [39], [185], [160], [203], [35], [122], [19], [197], [97], [142], [40], [33], [192], [86], [15], [168], [136], [240], [57], [76]], [[222], [72], [195], [255], [124], [253], [173], [225], [138], [42], [217], [49], [172], [138], [234], [195], [6], [64], [80], [37], [62], [148], [158], [116], [164], [64], [14], [84], [205], [212], [39], [153]], [[12], [7], [64], [114], [146], [11], [132], [219], [212], [175], [86], [127], [102], [45], [79], [145], [163], [255], [1], [230], [165], [106], [151], [251], [60], [34], [172], [246], [51], [13], [220], [60]], [[169], [112], [185], [239], [184], [82], [103], [68], [35], [166], [96], [9], [69], [26], [230], [7], [2], [140], [216], [43], [208], [25], [33], [45], [213], [202], [207], [0], [151], [121], [191], [212]], [[9], [115], [202], [182], [201], [115], [134], [112], [175], [208], [72], [240], [199], [150], [46], [118], [121], [6], [18], [149], [137], [117], [192], [57], [112], [234], [104], [19], [166], [18], [182], [255]], [[55], [149], [191], [44], [161], [201], [222], [53], [177], [175], [228], [163], [174], [255], [224], [16], [251], [129], [48], [7], [143], [208], [171], [209], [173], [119], [255], [148], [118], [227], [97], [127]], [[109], [230], [160], [97], [38], [112], [69], [145], [35], [98], [193], [49], [213], [185], [9], [146], [15], [49], [55], [120], [199], [7], [127], [231], [155], [175], [126], [23], [31], [134], [105], [51]], [[168], [139], [251], [17], [68], [24], [24], [140], [172], [46], [130], [159], [90], [243], [251], [222], [169], [32], [197], [73], [43], [184], [79], [155], [199], [218], [72], [190], [126], [196], [203], [208]], [[212], [130], [214], [216], [238], [214], [39], [118], [200], [125], [185], [159], [24], [34], [84], [170], [109], [131], [185], [177], [62], [73], [63], [50], [40], [254], [109], [75], [182], [46], [105], [40]], [[16], [116], [120], [7], [199], [227], [94], [9], [222], [219], [136], [143], [121], [239], [115], [53], [194], [187], [169], [84], [25], [12], [202], [36], [134], [228], [17], [136], [128], [26], [60], [89]], [[124], [25], [143], [175], [113], [222], [144], [198], [38], [111], [123], [122], [158], [32], [147], [129], [205], [135], [242], [252], [196], [168], [192], [40], [58], [185], [93], [79], [202], [235], [161], [86]]];
  const sigN = [["0xbf","0xc2","0x54","0x28","0x82","0xdd","0x1d","0x80","0xc5","0x2f","0x9c","0x74","0x1d","0x31","0x6b","0xaf","0xfb","0x2f","0xa6","0x91","0x32","0xbb","0x8","0x99","0x48","0xdd","0xaa","0xe5","0x52","0x60","0xf3","0xad"],["0x2b","0x39","0xb0","0x72","0x2e","0xe7","0x20","0xd1","0x5a","0x6c","0x98","0x8f","0xa2","0xa2","0xa8","0x70","0xe9","0x79","0xcf","0x9","0xde","0x45","0xc5","0xc","0x8b","0x72","0x24","0xc0","0x41","0xcc","0xb","0xa8"],["0x46","0xc6","0x68","0x9d","0x75","0x25","0x14","0xb3","0xa1","0x6c","0x73","0x3c","0x6","0x6b","0xdd","0x30","0xa3","0xa7","0x12","0x7b","0xb8","0x58","0xc5","0xae","0xf","0xd5","0x89","0x36","0xf5","0x67","0x87","0xbe"],["0x4a","0x6c","0xf6","0x74","0x5a","0x5a","0x7f","0x2d","0x13","0xb6","0xbe","0xee","0xd1","0xde","0x13","0xae","0x63","0x5f","0x28","0x8","0xbd","0xb2","0x49","0x0","0x48","0xfc","0xee","0xaf","0x4b","0x60","0x97","0x93"]]
  const sigPhi = [["0xbf","0xc2","0x54","0x28","0x82","0xdd","0x1d","0x80","0xc5","0x2f","0x9c","0x74","0x1d","0x31","0x6b","0xaf","0xfb","0x2f","0xa6","0x91","0x32","0xbb","0x8","0x99","0x48","0xdd","0xaa","0xe5","0x52","0x60","0xf3","0xad"],["0x2b","0x39","0xb0","0x72","0x2e","0xe7","0x20","0xd1","0x5a","0x6c","0x98","0x8f","0xa2","0xa2","0xa8","0x70","0xe9","0x79","0xcf","0x9","0xde","0x45","0xc5","0xc","0x8b","0x72","0x24","0xc0","0x41","0xcc","0xb","0xa6"],["0x8a","0xd1","0xbe","0xd6","0x42","0x1","0x5a","0x59","0xfe","0xc2","0x8a","0xec","0xa5","0x4b","0x8f","0x6c","0x54","0x6a","0xb9","0xb7","0x4a","0x2e","0xf8","0x1d","0x54","0xfa","0xdd","0x24","0x28","0x42","0xca","0x2e"],["0xac","0x74","0x9e","0x55","0xa6","0xd2","0x39","0xef","0xce","0x3d","0x7a","0x15","0x5d","0x96","0x31","0x2e","0x69","0x84","0x1e","0x2e","0x7e","0xc9","0x9e","0x85","0xf1","0xa3","0xf7","0x1b","0xb4","0x7d","0x32","0x98"]]
  const accumBase = [["0x2","0xf","0xcf","0xc","0x97","0x70","0x13","0x98","0x61","0x42","0x9e","0x9f","0xfc","0x8a","0xe2","0x7c","0x7e","0xbf","0x35","0xa3","0xa1","0x30","0xe7","0xec","0xb0","0x20","0x6b","0x3d","0xc","0x29","0xca","0xe4"],["0x96","0xbc","0xc7","0x36","0x58","0xf","0x63","0xc8","0xf1","0xa2","0xd","0xbd","0xc4","0xfd","0x5","0x5b","0xb","0x8d","0xb2","0xa2","0x9f","0xbc","0x41","0x92","0xc5","0xdb","0xa","0x76","0x79","0x29","0x5e","0xd6"],["0x40","0xea","0x42","0x97","0x70","0xa0","0x21","0xb6","0xc7","0x3e","0xfc","0x53","0x39","0x6b","0xa","0x26","0xb3","0xf8","0x5f","0x5b","0x4d","0x76","0xd4","0xfb","0xf1","0xe","0x4e","0x79","0x96","0xfe","0xfd","0xac"],["0x7c","0xc7","0x73","0xa6","0x48","0xab","0xc3","0xdd","0x83","0x6","0x5f","0xe4","0x42","0x69","0x94","0x94","0xd1","0xc3","0xf4","0x15","0xb2","0x7f","0xa8","0x6f","0x45","0x61","0x6b","0xbc","0x3b","0xb2","0x55","0xc6"]]
  let flag = false;
  Contract.methods.createElection(
    title,
    description,
    begin,
    end,
    choices.map(choice => [web3.utils.asciiToHex(choice)]),
    [],
    [],
	t1,
	sigN,
	sigPhi,
	accumBase
  ).send({from: Account})
  .on('transactionHash', onHash)
  .on('confirmation', (confirmationNumber, receipt) => {
    if(!flag) {
      flag = true;
      onConfirmed(confirmationNumber, receipt);
    }
  });
}

export { getElection, getAllElections, createElection }
from util import randrange, intToBytesArray
from Crypto.PublicKey import ElGamal
from Crypto.Util import number

# constant elgamalBase and elgamalP
g = 94493677743813493826267353152185494723850760297241471026510779195400035093064059658637922030753272252229887777337187403118339807328050159324387981312700218892075674706253481675394746745490735054028566111895967522695535805037290910029370742764336097606181330224189064370356170285380952152352173575800325770948
p = 102648948995783859628452780494099717822287635561446366331725315272293345387669956950442649074663459456478568581507919894184222367303997219280688270532431124107487597857112966811552274209131788409322689569545240612203934874336065981768695371646361093913954082413486674211271105045172480352791209828988862084947

# keep x as secrets, send h onto blockchain
def gen_tellers_keys():
  x = randrange(2, p-1)
  h = pow(g,x,p)
  return (x,h)

# use the public key H to encrypt plaintext m 
def encrypt(H, m):
  y = randrange(2,p-1)
  s = pow(H,y,p)
  c1 = pow(g,y,p)
  c2 = (m*s)%p
  return (c1,c2)

# use the private key x to decrypt ciphertext c1,c2
def decrypt(x, c1, c2):
  s = pow(c1,x,p)
  m = (c2*number.inverse(s,p))%p
  return m

if __name__ == "__main__":
  ''' # test elgamal encryption
  x = randrange(2, p-1)
  h = pow(g,x,p)

  m = randrange(2, p-1)
  c1, c2 = encrypt(h, m)

  print (m == decrypt(x, c1, c2))
  '''
  # test RSA signature
  sk1_p = 2137793077554429947068604343529912477529857730811218867111136356300225696603764007882186510841535950119296431707200860297730546310670028592521629236768281
  sk1_q = 3319230918551018406175799029605747271672504151342993045936870599115337241061687885474458532449847468303853475265861467302474511818979376608753258801817903
  pk1 = 14191657760965998085005826640715876589479513777361643426381627211346756319353889198837415931919549616837473651294425796842471813398540553425686970229679533851410399176179610085156402060082721949868322169156598121918838577146466829306606773782704586074184035542489242222121130267918228658269373157063136669487

  assert(number.isPrime(sk1_p))
  assert(number.isPrime(sk1_q))

  N = (pk1 - 1) // 2
  m = randrange(2, N)
  sig = RSA_siganture(sk1_p, sk1_q, m)

  # print(pow(sig,65537,sk1_p*sk1_q) == m)
  # print(pow(sig,65537,N) == m)

  print (intToBytesArray(m, 128))
  print (intToBytesArray(sig, 128))
  print (intToBytesArray(pk1, 128))
  print (intToBytesArray(N, 128))